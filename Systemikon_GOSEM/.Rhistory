select=c(2, 5),
subset=Species %in% c('setosa', 'versicolor'))
iris.subs$Species
iris.subs$Species <- factor(iris.subs$Species)
iris.subs$Species
iris.subs$Species <- relevel(iris.subs$Species, ref='setosa')
head(iris.subs)
x11()
with(iris.subs, boxplot(Sepal.Width~Species))
?boxpplot
?boxplot
?with()
boxplot(Sepal.Width~Species)
boxplot(iris.subs$Sepal.Width~Species)
boxplot(iris.subs$Sepal.Width~iris.subs$Species)
?boxplot
log.lm <- glm(Species ~ Sepal.Width,
family='binomial',
data=iris.subs)
summary(log.lm)
pred.tf <- predict(log.lm, type='response') > .5
pred.levels <- rep(NA, length(pred.tf))
pred.levels[pred.tf] <- 'versicolor'   # true values are versicolor
pred.levels[!pred.tf] <- 'setosa' # false values are reference level
table(pred.levels, iris.subs$Species)
?glm
?pred.tf
?predict
install.packages("Hmisc")
library(minfi)
library(IMA)
library(Hmisc)
install.packages(IMA)
install.packages("IMA")
load("/Users/Wilfred/Desktop/Group 1 and 2 data/PCA/Spearman.RData")
firstPC.spearman <- apply(betas, 1,
function(x, y){
rcorr(x, y, method = 'spearman')
},
y = sympPCA$x[, 1])
?rcorr
firstPC.spearman <- apply(betas, 1,
function(x, y){
rcorr(x, y, type = 'spearman')
},
y = sympPCA$x[, 1])
sampID <- unlist(lapply(cfsExprmethy450@groupinfo[,1],
function(x){
strsplit(x, '#')[[1]][4]
}))
library(IMA)
load("/Users/Wilfred/Desktop/Group 1 and 2 data/PCA/Spearman Correlation/spearmanwithfdr.RData")
head(qvals)
class(qvals)
qvals[1]
qvals[1:9]
qvals[1] > 0.1
qvals[1] < 0.1
qvals[1] < 0.05
qvals[1] < 0.01
?sapply
qvals.list <- as.list(qvals)
qvals.list[1]
qvals.list[2]
qvals.test <- sapply(qvals, function(x){
qvals[x] < 0.05 == TRUE
})
qvals[1] < 0.05 == TRUE
qvals[1] < 0.05 = TRUE
qvals.test <- sapply(qvals, function(x){
test <- qvals[x] < 0.05
test == TRUE
})
qvals.test
qvals[1] < 0.05
qvals.test <- sapply(qvals, function(x){
test <- qvals[x] < 0.05
})
qvals.test
qvals.test[1]
qvals.test <- sapply(qvals, function(x){
qvals[x] < 0.05
})
qvals.test[1]
qvals[1]
qvals[1] < 0.05
?function
(x)
install.packages(NormqPCR)
install.packages('NormqPCR')
source("http://bioconductor.org/biocLite.R")
biocLite("NormqPCR")
browsevignettes("NormqPCR")
browseVignettes("NormqPCR")
data(geNorm)
data('geNorm')
data(geNorm)
library(Vand02)
install.packages(Vand02)
install.packages('Vand02')
library(normqPCR)
library(NormqPCR)
data(geNorm)
geNorm
test <- data(geNorm)
test
geNorm.qPCRBatch
install.packages('wateRmelon')
install.packages("IMA")
install.packages("wateRmelon")
?biocLite
source("http://bioconductor.org/biocLite.R")
biocLits('wateRmelon')
biocLite('wateRmelon')
library(wateRmelon)
install.packages('lumi')
biocLite('lumi')
library(wateRmelon)
data(melon)
data('melon')
data (melon)
??melon
> install.packages('ROCR', 'matrixStats')
> source("http://bioconductor.org/biocLite.R")
> biocLite( 'limma', 'minfi',
+ 'IlluminaHumanMethylation450kmanifest',
+ 'methylumi', 'lumi')
install.packages('ROCR', 'matrixStats')
install.packages('ROCR', 'matrixStats')
install.packages('ROCR', 'matrixStats')
source("http://bioconductor.org/biocLite.R")
biocLite( 'limma', 'minfi', 'IlluminaHumanMethylation450kmanifest', 'methylumi', 'lumi')
biocLite( 'limma', 'minfi', 'IlluminaHumanMethylation450kmanifest', 'methylumi', 'lumi')
biocLite('limma', 'minfi', 'IlluminaHumanMethylation450kmanifest', 'methylumi', 'lumi')
library('wateRmelon')
install.packages('wateRmelon')
install.packages('ROCR', 'matrixStats')
source("http://bioconductor.org/biocLite.R")
biocLite('wateRmelon')
libary(wateRmelon)
library(wateRmelon)
data(melon)
dim(melon)
?pfilter
melon.pf <- pfilter(melon)
melon.dasen.pf <- dasen(melon.pf)
dim(melon.dasen.pf)
dmrse_row(melon.pf)
dmrse_row(melon.dasen.pf)
genki(melon.pf)
genki(melon.dasen.pf)
seabi(melon.pf, sex=pData(melon.pf)$sex, X=fData(melon.pf)$CHR=='X')
seabi(melon.dasen.pf, sex = pData(melon.dasen.pf)$sex, X = fData(melon.dasen.pf)$CHR=="X")
boxplot(log(methylated(melon)), las=2, cex.axis=0.8 )
boxplot(log(unmethylated(melon)), las=2, cex.axis=0.8 )
boxplot(log(unmethylated(melon)), las=2, cex.axis=0.8 )
install.packages(IMA)
install.packages("IMA",repos=c("http://rforge.net"))
load("/Users/Wilfred/Desktop/Group 1 and 2 data/July 25 2014 CFS Only/Sept 3 New Resp vs Nonresp.RData")
library(IMA)
install.packages("IMA",repos=c("http://rforge.net"))
install.packages("IMA",repos=c("http://rforge.net"))
library()
install.packages("sequinr")
?install.packages
install.packages("seqinr", repos="http://R-Forge.R-project.org")
install.packages("seqinr")
ls("package:seqinr")
ls(seqinr)
library(seqinr)
ls("package:seqinr")
a("Tyr")
choosebank()
choosebank("swissprot")
query("seq", "N=MBP1_YEAST")
mbp1 <- getSequence(seq)
closebank()
x <- AAstat(mbp1[[1]])
barplot(sort(x$Compo))
seq
if (!require(sos)) {
install.packages("sos")
library(sos)
}
library(sos)
findFn("moving average")
source("testscript.R")
# sample script:
# define a vector
a <- c(1, 1, 2, 3, 5, 8, 13)
# list its contents
a
# calculate the mean of its values
mean(a)
print(a)
print(mean(a))
5
5+4
5 + 1 / 2
3 * 2 + 1
3 * (2 + 1)
2^3
8 ^ (1/3)
7 %% 2
7 %/% 2
complex(1)
complex(4)
complex(1, 2) # imaginary part missing - defaults to zero
complex(1, 2, 3) # one complex number
complex(4, 2, 3) # four complex numbers
complex(real = 0, imaginary = pi)
complex(imaginary = pi, real = 0)
a <- 3 > 5; a; mode(a); typeof(a)
a <- 3 < 5; a; mode(a); typeof(a)
a <- 3.0;   a;  mode(a); typeof(a) #
a <- 3.0e0; a;  mode(a); typeof(a)
a <- 3;     a;  mode(a); typeof(a)
a <- as.integer(3);  a;  mode(a); typeof(a)
a <- "3"; a;  mode(a); typeof(a)
as.numeric(pi)
as.numeric("pi")
as.logical(0)
as.logical(1)
as.logical(-1
)
as.logical(pi)
as.logical("pi")
f <- c(1, 1, 3, 5, 8, 13, 21)
f
length(f)
f[seq(2, 6, 2)]
a <- c(1, 3, 4, 1)
f[a]
a <- -(1:4)
f[a]
f[-((length(f)-3):length(f))]
f <- c(f, f[length(f)-1] + f[length(f)]); f
f <- c(f, f[length(f)-1] + f[length(f)]); f
f <- c(f, f[length(f)-1] + f[length(f)]); f
f+1
f*2
a <- f[-1]; a # like f[], but omitting the first element
b <- f[1:(length(f)-1)]; b # like f[], but shortened by the least element
c <- a / b
c
abs(c - ((1+sqrt(5))/2))
a <- 1:12; a
dim(a) <- c(2,6); a
dim(a) <- c(2,2,3); a
dim(a)
dim(a)[3]
a <- 1:4
b <- 5:8
c <- rbind(a, b); c
d <- cbind(a, b); d
e <- cbind(d, 9:12); e
e[3:4, 1:2]
pUC19 <- list(size=2686, marker="ampicillin", ori="ColE1", accession="L01397", BanI=c(235, 408, 550, 1647) )
pUC19[[1]]
pUC19[[2]]
pUC19$ori
pUC19$BanI[2]
Vectors <- read.table("vectors.tsv", sep="\t", header=TRUE)
Vectors
V2 <- edit(Vectors)
Vectors[1, ]
Vectors[2, ]
Vectors[ ,2 ]
Vectors$Name
Vectors$Size > 3000
Vectors$Name[Vectors$Size > 3000]
Vectors$Name[Vectors$Ori != "ColE1"]
biCode <- function(s) {
substr(s, 4, 6) <- substr(strsplit(s,"\\s+")[[1]][2], 1, 2)
return (toupper(substr(s, 1, 5)))
}
biCode("Homo sapiens")
biCode("saccharomyces cerevisiae")
fib <- function(n) {
if (n < 1) { return( c(0) ) }
else if (n == 1) { return( c(1) ) }
else if (n == 2) { return( c(1, 1) ) }
else {
v <- c(1, 1)
for ( i in 3:n ) {
v <- c(v, v[length(v)-1] + v[length(v)])
}
return( v )
}
}
fib(4)
rollDice <- function(len=1, MIN=1, MAX=6) {
v <- c()
for (i in 1:len) {
x <- runif(1, min=MIN, max=MAX)
x <- as.integer(x)
v <- c(v, x)
}
return(v)
}
rollDice()
table(rollDice(1000))
debug(rollDice)
rollDice(10)
x
v
rollDice <- function(len=1, MIN=1, MAX=6) {
v <- c()
for (i in 1:len) {
x <- runif(1, min=MIN, max=MAX+1)
x <- as.integer(x)
v <- c(v, x)
}
return(v)
}
table(rollDice(1000))
rollDice <- function(len=1, MIN=1, MAX=6) {
return(as.integer(runif(len, min=MIN, max=MAX+1)))
}
table(rollDice(1000))
rollDice(1)
rollDice(2)
rollDice(7)
rollDice(10)
a <- 1:16
dim(a) <- c(4,4)
a
a[2:3, 2:3]
load("~/Desktop/Group 1 and 2 data/Dec 21/May 9 2014 Re-analysis/Jan 9 2015.RData")
plot.new()
cat <- as.factor(paste(data$CFS_Ctrl, data$NR_R_C, sep = "."))
x <- data$cg16586394
y <- data$Percent_Inhibition
plot(x, y, main = "cg16586394 and Dex Suppression", xlab = "Methylation @ cg16586394",
ylab = "% Inhibition", pch = as.numeric(cat))
points(x[cat == "CFS.R"], y[cat == "CFS.R"], pch=24, cex=1.5, col="black", bg="red") #plot responders as red triangles
points(x[cat == "CFS.NR"], y[cat == "CFS.NR"], pch=21, cex=1.5, col="black", bg="blue") #plot responders as blue circles
points(x[cat == "Control.C"], y[cat == "Control.C"], pch=22, cex=1.5, col="black", bg="orange") #plot controls as orange squares
plot.new()
cat <- as.factor(paste(data$CFS_Ctrl, data$NR_R_C, sep = "."))
x <- data$cg16586394
y <- data$Percent_Inhibition
plot(x, y, main = "cg16586394 and Dex Suppression", xlab = "Methylation @ cg16586394",
ylab = "% Inhibition", pch = as.numeric(cat))
points(x[cat == "CFS.R"], y[cat == "CFS.R"], pch=24, col="black", bg="red") #plot responders as red triangles
points(x[cat == "CFS.NR"], y[cat == "CFS.NR"], pch=21, col="black", bg="blue") #plot responders as blue circles
points(x[cat == "Control.C"], y[cat == "Control.C"], pch=23, col="black", bg="orange") #plot controls as orange squares
#Add regression lines
x <- data$cg16586394[cat=="CFS.NR"]
y <- data$Percent_Inhibition[cat=="CFS.NR"]
abline(lm(y ~ x), col = "blue")
x <- data$cg16586394[cat=="CFS.R"]
y <- data$Percent_Inhibition[cat=="CFS.R"]
abline(lm(y ~ x), col = "red")
x <- data$cg16586394[cat=="Control.C"]
y <- data$Percent_Inhibition[cat=="Control.C"]
abline(lm(y ~ x), col = "orange")
?legend
levels(cat)[3] <- "Control" #renames "Control.C" to "Control"
legend(locator(1), levels(cat), cex=0.8, col=c("red", "blue", "orange"), pch=c(24,21,23))
?abline
plot.new()
cat <- as.factor(paste(data$CFS_Ctrl, data$NR_R_C, sep = "."))
x <- data$cg16586394
y <- data$Percent_Inhibition
plot(x, y, main = "cg16586394 and Dex Suppression", xlab = "Methylation @ cg16586394",
ylab = "% Inhibition", pch = as.numeric(cat))
points(x[cat == "CFS.R"], y[cat == "CFS.R"], pch=24, col="black", bg="red") #plot responders as red triangles
points(x[cat == "CFS.NR"], y[cat == "CFS.NR"], pch=21, col="black", bg="blue") #plot responders as blue circles
points(x[cat == "Control.C"], y[cat == "Control.C"], pch=23, col="black", bg="orange") #plot controls as orange squares
#Add regression lines
x <- data$cg16586394[cat=="CFS.NR"]
y <- data$Percent_Inhibition[cat=="CFS.NR"]
abline(lm(y ~ x), col = "blue", lty = 2)
x <- data$cg16586394[cat=="CFS.R"]
y <- data$Percent_Inhibition[cat=="CFS.R"]
abline(lm(y ~ x), col = "red", lty = 3)
x <- data$cg16586394[cat=="Control.C"]
y <- data$Percent_Inhibition[cat=="Control.C"]
abline(lm(y ~ x), col = "orange")
levels(cat)[3] <- "Control" #renames "Control.C" to "Control"
legend(locator(1), levels(cat), inset = .05, cex=0.5, col=c("red", "blue", "orange"), pch=c(24,21,23))
plot.new()
cat <- as.factor(paste(data$CFS_Ctrl, data$NR_R_C, sep = "."))
x <- data$cg16586394
y <- data$Percent_Inhibition
plot(x, y, main = "cg16586394 and Dex Suppression", xlab = "Methylation @ cg16586394",
ylab = "% Inhibition", pch = as.numeric(cat))
points(x[cat == "CFS.R"], y[cat == "CFS.R"], pch=24, col="black", bg="red") #plot responders as red triangles
points(x[cat == "CFS.NR"], y[cat == "CFS.NR"], pch=21, col="black", bg="blue") #plot responders as blue circles
points(x[cat == "Control.C"], y[cat == "Control.C"], pch=23, col="black", bg="orange") #plot controls as orange squares
#Add regression lines
x <- data$cg16586394[cat=="CFS.NR"]
y <- data$Percent_Inhibition[cat=="CFS.NR"]
abline(lm(y ~ x), col = "blue", lty = 2)
x <- data$cg16586394[cat=="CFS.R"]
y <- data$Percent_Inhibition[cat=="CFS.R"]
abline(lm(y ~ x), col = "red", lty = 3)
x <- data$cg16586394[cat=="Control.C"]
y <- data$Percent_Inhibition[cat=="Control.C"]
abline(lm(y ~ x), col = "orange")
legend("topright", legend = c("CFS Nonresponder", "CFS Responder", "Control"), inset = .05, cex=0.5, col=c("red", "blue", "orange"), pch=c(24,21,23), lty = c(2, 3, 1))
plot.new()
cat <- as.factor(paste(data$CFS_Ctrl, data$NR_R_C, sep = "."))
x <- data$cg16586394
y <- data$Percent_Inhibition
plot(x, y, main = "cg16586394 and Dex Suppression", xlab = "Methylation @ cg16586394",
ylab = "% Inhibition", pch = as.numeric(cat))
points(x[cat == "CFS.R"], y[cat == "CFS.R"], pch=24, col="black", bg="red") #plot responders as red triangles
points(x[cat == "CFS.NR"], y[cat == "CFS.NR"], pch=21, col="black", bg="blue") #plot responders as blue circles
points(x[cat == "Control.C"], y[cat == "Control.C"], pch=23, col="black", bg="orange") #plot controls as orange squares
#Add regression lines
x <- data$cg16586394[cat=="CFS.NR"]
y <- data$Percent_Inhibition[cat=="CFS.NR"]
abline(lm(y ~ x), col = "blue", lty = 2)
x <- data$cg16586394[cat=="CFS.R"]
y <- data$Percent_Inhibition[cat=="CFS.R"]
abline(lm(y ~ x), col = "red", lty = 3)
x <- data$cg16586394[cat=="Control.C"]
y <- data$Percent_Inhibition[cat=="Control.C"]
abline(lm(y ~ x), col = "orange")
legend("topright", legend = c("CFS Nonresponder", "CFS Responder", "Control"), inset = .05, fill = c("red", "blue", "orange"), pch=c(24,21,23), lty = c(2, 3, 1))
plot.new()
cat <- as.factor(paste(data$CFS_Ctrl, data$NR_R_C, sep = "."))
x <- data$cg16586394
y <- data$Percent_Inhibition
plot(x, y, main = "cg16586394 and Dex Suppression", xlab = "Methylation @ cg16586394",
ylab = "% Inhibition", pch = as.numeric(cat))
points(x[cat == "CFS.R"], y[cat == "CFS.R"], pch=24, col="black", bg="red") #plot responders as red triangles
points(x[cat == "CFS.NR"], y[cat == "CFS.NR"], pch=21, col="black", bg="blue") #plot responders as blue circles
points(x[cat == "Control.C"], y[cat == "Control.C"], pch=23, col="black", bg="orange") #plot controls as orange squares
#Add regression lines
x <- data$cg16586394[cat=="CFS.NR"]
y <- data$Percent_Inhibition[cat=="CFS.NR"]
abline(lm(y ~ x), col = "blue", lty = 2)
x <- data$cg16586394[cat=="CFS.R"]
y <- data$Percent_Inhibition[cat=="CFS.R"]
abline(lm(y ~ x), col = "red", lty = 3)
x <- data$cg16586394[cat=="Control.C"]
y <- data$Percent_Inhibition[cat=="Control.C"]
abline(lm(y ~ x), col = "orange")
legend("topright", legend = c("CFS Nonresponder", "CFS Responder", "Control"), inset = .05, cex = 0.5, col = c("red", "blue", "orange"), pch=c(24,21,23), lty = c(2, 3, 1))
load("~/Desktop/Group 1 and 2 data/Dec 21/fullannotInd.rda")
rownames(fullannot)
fullannot$cg12841684
rownames(fullannot)
fullannot["cg12841684",]
site <- fullannot["cg12841684",]
site
colnames(site)
names(site)
site$ILMNID
site[ILMNID]
class(site)
site["UCSC_REFGENE_NAME"]
site["REGULATORY_FEATURE_NAME"]
site["RUCSC_REFGENE_GROUP"]
site["UCSC_REFGENE_GROUP"]
install.packages('combinat')
?combn
?permn
permn(3)
library(combinat)
?permn
permn(3)
?combn
combn(letter[1:4])
combn(letter[1:4], 3)
combn(letters[1:4], 3)
combn(letters[1:4], 2)
text <- c(1, 2, 3)
combn(text, 2)
setwd("~/Dropbox/BCB420_2015/Systemikon_GOSEM")
library(GOSemSim) #loads GOSemSim package
listofgenes <- "samplelist.txt" #obtain list of Entrez IDs (will be modified once List of Genes format is determined)
genetable <- read.table(listofgenes, sep = "\t", header = TRUE) #organize list of genes into table
genecombo <- t(combn(genetable[,1], m = 2)) #obtain every possible combination of 2 genes. Transpose the matrix to make it easier to read.
colnames(genecombo)[1:2] <- c("Gene 1", "Gene 2") #Rename the first two columns for clarity
CCscore <- apply(genecombo, 1, function(x){ #Calculate CC GO Semantic Similarity Scores over each row (1) of the matrix
CCSemSim <- geneSim(x[1], x[2], ont = 'CC', organism = 'human', measure = 'Rel', combine = 'BMA') #should return a vector of 3 elements
if(length(CCSemSim) < 3){ #if a vector of a length < 3 is returned (ie. calculation fails due to lack of GO annotations)
CC <- 0 #assign a CC score of 0
}
else{
CC <- CCSemSim$geneSim #The data is organized as a vector with 3 elements so we must extract the scores this way
}
if(is.na(CC)){
CC <- 0 #If the score is NA, assign a score of 0
}
else{
CC <- CC
}})
BPscore <- apply(genecombo, 1, function(x){ #Calculate BP GO Semantic Similarity Scores over each row (1) of the matrix
BPSemSim <- geneSim(x[1], x[2], ont = 'BP', organism = 'human', measure = 'Rel', combine = 'BMA')
if(length(BPSemSim) < 3){ #if a vector of a length < 3 is returned (ie. calculation fails due to lack of GO annotations)
BP <- 0 #assign a BP score of 0
}
else{
BP <- BPSemSim$geneSim
}
if(is.na(BP)){
BP <- 0 #if BP score is NA, assign a BP score of 0
}
else{
BP <- BP
}})
RawScores <- cbind(CCscore, BPscore) #combine raw scores into table
GOSEMScore <- rowMeans(RawScores) #calculate average of raw GO Semantic Similarity Score
TOTALGOSEM <- cbind(genecombo, GOSEMScore) #compile table with all gene pairs and GOSEMScores
passthresh <- which(TOTALGOSEM[,'GOSEMScore'] > 0.2) #determines indices of the table (gene pairs) that pass the 0.2 threshold
GOSemSim <- TOTALGOSEM[passthresh,] #produce a table with gene pairs that GO Semantic Similarity threshold
GOSemSim
